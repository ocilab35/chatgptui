{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shehzad\\\\Downloads\\\\Metronic-System-main\\\\Metronic-System-main\\\\src\\\\Components\\\\Navbar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"./Header\";\nimport Sidebar from \"./SideBar\";\nimport Chat from \"./Chat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Navbar = () => {\n  _s();\n  const [darkMode, setDarkMode] = useState(false);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [showMore, setShowMore] = useState(false);\n  const [chats, setChats] = useState([]);\n  const [activeChatId, setActiveChatId] = useState(null);\n  const [newChatTrigger, setNewChatTrigger] = useState(0);\n  const [error, setError] = useState(null);\n\n  // Fetch chats or create a new one on mount\n  useEffect(() => {\n    const initializeChats = async () => {\n      try {\n        const token = localStorage.getItem(\"token\");\n        if (!token) {\n          setError(\"Please log in to use the chat\");\n          return;\n        }\n        const response = await fetch(\"http://localhost:5000/api/chats/\", {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch chats\");\n        const data = await response.json();\n        if (data.length > 0) {\n          // Set the most recent chat as active\n          setChats(data);\n          setActiveChatId(data[0]._id);\n        } else {\n          // Create a new chat if none exist\n          await createNewChat(token);\n        }\n      } catch (error) {\n        console.error(\"Error initializing chats:\", error);\n        setError(\"Failed to load chats. Please try again.\");\n      }\n    };\n    initializeChats();\n  }, []);\n\n  // Function to create a new chat\n  const createNewChat = async token => {\n    try {\n      const response = await fetch(\"http://localhost:5000/api/chats/\", {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title: \"New Chat\"\n        })\n      });\n      if (!response.ok) throw new Error(\"Failed to create chat\");\n      const newChat = await response.json();\n      setChats(prev => [newChat, ...prev]);\n      setActiveChatId(newChat._id);\n      setNewChatTrigger(prev => prev + 1);\n    } catch (error) {\n      console.error(\"Error creating chat:\", error);\n      setError(\"Failed to create a new chat.\");\n    }\n  };\n\n  // Handler for new chat\n  const handleNewChat = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        setError(\"Please log in to create a new chat\");\n        return;\n      }\n      setError(null);\n      await createNewChat(token);\n    } catch (error) {\n      console.error(\"Error in handleNewChat:\", error);\n      setError(\"Failed to create a new chat.\");\n    }\n  };\n\n  // Handler for selecting a chat\n  const handleSelectChat = chatId => {\n    setActiveChatId(chatId);\n    setNewChatTrigger(prev => prev + 1);\n    setError(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `flex flex-col h-screen ${darkMode ? \"bg-gray-900 text-white\" : \"bg-gray-50 text-gray-900\"}`,\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      darkMode: darkMode,\n      setDarkMode: setDarkMode,\n      sidebarCollapsed: sidebarCollapsed,\n      setSidebarCollapsed: setSidebarCollapsed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-1 overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        darkMode: darkMode,\n        sidebarCollapsed: sidebarCollapsed,\n        setSidebarCollapsed: setSidebarCollapsed,\n        showMore: showMore,\n        setShowMore: setShowMore,\n        onNewChat: handleNewChat,\n        chats: chats,\n        onSelectChat: handleSelectChat,\n        activeChatId: activeChatId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chat, {\n        darkMode: darkMode,\n        newChatTrigger: newChatTrigger,\n        activeChatId: activeChatId,\n        setChats: setChats,\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(Navbar, \"Cc2lMuj1eC07KUN2HVfOwuVQWj0=\");\n_c = Navbar;\nexport default Navbar;\nvar _c;\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["React","useState","useEffect","Header","Sidebar","Chat","jsxDEV","_jsxDEV","Navbar","_s","darkMode","setDarkMode","sidebarCollapsed","setSidebarCollapsed","showMore","setShowMore","chats","setChats","activeChatId","setActiveChatId","newChatTrigger","setNewChatTrigger","error","setError","initializeChats","token","localStorage","getItem","response","fetch","headers","Authorization","ok","Error","data","json","length","_id","createNewChat","console","method","body","JSON","stringify","title","newChat","prev","handleNewChat","handleSelectChat","chatId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onNewChat","onSelectChat","_c","$RefreshReg$"],"sources":["C:/Users/Shehzad/Downloads/Metronic-System-main/Metronic-System-main/src/Components/Navbar.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Header from \"./Header\";\nimport Sidebar from \"./SideBar\";\nimport Chat from \"./Chat\";\n\nconst Navbar = () => {\n  const [darkMode, setDarkMode] = useState(false);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [showMore, setShowMore] = useState(false);\n  const [chats, setChats] = useState([]);\n  const [activeChatId, setActiveChatId] = useState(null);\n  const [newChatTrigger, setNewChatTrigger] = useState(0);\n  const [error, setError] = useState(null);\n\n  // Fetch chats or create a new one on mount\n  useEffect(() => {\n    const initializeChats = async () => {\n      try {\n        const token = localStorage.getItem(\"token\");\n        if (!token) {\n          setError(\"Please log in to use the chat\");\n          return;\n        }\n\n        const response = await fetch(\"http://localhost:5000/api/chats/\", {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n\n        if (!response.ok) throw new Error(\"Failed to fetch chats\");\n        const data = await response.json();\n\n        if (data.length > 0) {\n          // Set the most recent chat as active\n          setChats(data);\n          setActiveChatId(data[0]._id);\n        } else {\n          // Create a new chat if none exist\n          await createNewChat(token);\n        }\n      } catch (error) {\n        console.error(\"Error initializing chats:\", error);\n        setError(\"Failed to load chats. Please try again.\");\n      }\n    };\n\n    initializeChats();\n  }, []);\n\n  // Function to create a new chat\n  const createNewChat = async (token) => {\n    try {\n      const response = await fetch(\"http://localhost:5000/api/chats/\", {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ title: \"New Chat\" }),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to create chat\");\n      const newChat = await response.json();\n      setChats((prev) => [newChat, ...prev]);\n      setActiveChatId(newChat._id);\n      setNewChatTrigger((prev) => prev + 1);\n    } catch (error) {\n      console.error(\"Error creating chat:\", error);\n      setError(\"Failed to create a new chat.\");\n    }\n  };\n\n  // Handler for new chat\n  const handleNewChat = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        setError(\"Please log in to create a new chat\");\n        return;\n      }\n      setError(null);\n      await createNewChat(token);\n    } catch (error) {\n      console.error(\"Error in handleNewChat:\", error);\n      setError(\"Failed to create a new chat.\");\n    }\n  };\n\n  // Handler for selecting a chat\n  const handleSelectChat = (chatId) => {\n    setActiveChatId(chatId);\n    setNewChatTrigger((prev) => prev + 1);\n    setError(null);\n  };\n\n  return (\n    <div\n      className={`flex flex-col h-screen ${\n        darkMode ? \"bg-gray-900 text-white\" : \"bg-gray-50 text-gray-900\"\n      }`}\n    >\n      <Header\n        darkMode={darkMode}\n        setDarkMode={setDarkMode}\n        sidebarCollapsed={sidebarCollapsed}\n        setSidebarCollapsed={setSidebarCollapsed}\n      />\n      <div className=\"flex flex-1 overflow-hidden\">\n        <Sidebar\n          darkMode={darkMode}\n          sidebarCollapsed={sidebarCollapsed}\n          setSidebarCollapsed={setSidebarCollapsed}\n          showMore={showMore}\n          setShowMore={setShowMore}\n          onNewChat={handleNewChat}\n          chats={chats}\n          onSelectChat={handleSelectChat}\n          activeChatId={activeChatId}\n        />\n        <Chat\n          darkMode={darkMode}\n          newChatTrigger={newChatTrigger}\n          activeChatId={activeChatId}\n          setChats={setChats}\n          error={error}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Navbar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}